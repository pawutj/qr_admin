(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{1488:function(e,n,t){"use strict";t.r(n);var r=t(20),a=t(21),i=t(23),s=t(22),o=t(24),l=t(0),d=t.n(l),c=t(95),g=(t(102),t(103),t(104)),p=t(99),u=t(96),m=t(97),b=t(25),h=t(5),f=t(410),v=t(409),y=function(e){return Array.from({length:e},function(e,n){return n}).map(function(e){return{id:"item-".concat(e),content:"item ".concat(e)}})},D=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(i.a)(this,Object(s.a)(n).call(this,e))).state={items:y(6)},t.onDragEnd=t.onDragEnd.bind(Object(b.a)(Object(b.a)(t))),t}return Object(o.a)(n,e),Object(a.a)(n,[{key:"onDragEnd",value:function(e){if(e.destination){var n=function(e,n,t){var r=Array.from(e),a=r.splice(n,1),i=Object(f.a)(a,1)[0];return r.splice(t,0,i),r}(this.state.items,e.source.index,e.destination.index);this.setState({items:n})}}},{key:"render",value:function(){var e=this;return d.a.createElement(v.a,{onDragEnd:this.onDragEnd},d.a.createElement(v.c,{droppableId:"droppable"},function(n,t){return d.a.createElement("div",{ref:n.innerRef,style:(r=t.isDraggingOver,{background:r?"lightblue":"lightgrey",padding:8,width:250})},e.state.items.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement("div",Object.assign({className:"white bg-success",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:(r=t.isDragging,a=n.draggableProps.style,Object(h.a)({userSelect:"none",padding:16,margin:"0 0 ".concat(8,"px 0"),background:r?"lightgreen":"grey"},a))}),e.content);var r,a})}),n.placeholder);var r}))}}]),n}(l.Component),E=function(e){return Array.from({length:e},function(e,n){return n}).map(function(e){return{id:"item-".concat(e),content:"item ".concat(e)}})},x=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(i.a)(this,Object(s.a)(n).call(this,e))).state={items:E(6)},t.onDragEnd=t.onDragEnd.bind(Object(b.a)(Object(b.a)(t))),t}return Object(o.a)(n,e),Object(a.a)(n,[{key:"onDragEnd",value:function(e){if(e.destination){var n=function(e,n,t){var r=Array.from(e),a=r.splice(n,1),i=Object(f.a)(a,1)[0];return r.splice(t,0,i),r}(this.state.items,e.source.index,e.destination.index);this.setState({items:n})}}},{key:"render",value:function(){var e=this;return d.a.createElement(v.a,{onDragEnd:this.onDragEnd},d.a.createElement(v.c,{droppableId:"droppable",direction:"horizontal"},function(n,t){return d.a.createElement("div",Object.assign({ref:n.innerRef,style:(r=t.isDraggingOver,{background:r?"lightblue":"lightgrey",display:"flex",padding:8,overflow:"auto"})},n.droppableProps),e.state.items.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement("div",Object.assign({className:"white bg-success",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:(r=t.isDragging,a=n.draggableProps.style,Object(h.a)({userSelect:"none",padding:16,margin:"0 ".concat(8,"px 0 0"),background:r?"lightgreen":"grey"},a))}),e.content);var r,a})}),n.placeholder);var r}))}}]),n}(l.Component),k=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Array.from({length:e},function(e,n){return n}).map(function(e){return{id:"item-".concat(e+n),content:"item ".concat(e+n)}})},I=function(e,n,t){var r=Array.from(e),a=r.splice(n,1),i=Object(f.a)(a,1)[0];return r.splice(t,0,i),r},O=function(e,n,t,r){var a=Array.from(e),i=Array.from(n),s=a.splice(t.index,1),o=Object(f.a)(s,1)[0];i.splice(r.index,0,o);var l={};return l[t.droppableId]=a,l[r.droppableId]=i,l},j=function(e,n){return Object(h.a)({userSelect:"none",padding:16,margin:"0 0 ".concat(8,"px 0"),background:e?"lightgreen":"grey"},n)},C=function(e){return{background:e?"lightblue":"lightgrey",padding:8,width:250}},S=function(e){function n(){var e,t;Object(r.a)(this,n);for(var a=arguments.length,o=new Array(a),l=0;l<a;l++)o[l]=arguments[l];return(t=Object(i.a)(this,(e=Object(s.a)(n)).call.apply(e,[this].concat(o)))).state={items:k(10),selected:k(5,10)},t.id2List={droppable:"items",droppable2:"selected"},t.getList=function(e){return t.state[t.id2List[e]]},t.onDragEnd=function(e){var n=e.source,r=e.destination;if(r)if(n.droppableId===r.droppableId){var a=I(t.getList(n.droppableId),n.index,r.index),i={items:a};"droppable2"===n.droppableId&&(i={selected:a}),t.setState(i)}else{var s=O(t.getList(n.droppableId),t.getList(r.droppableId),n,r);t.setState({items:s.droppable,selected:s.droppable2})}},t}return Object(o.a)(n,e),Object(a.a)(n,[{key:"render",value:function(){var e=this;return d.a.createElement("div",{className:"d-flex justify-content-around"},d.a.createElement(v.a,{onDragEnd:this.onDragEnd},d.a.createElement(v.c,{droppableId:"droppable"},function(n,t){return d.a.createElement("div",{ref:n.innerRef,style:C(t.isDraggingOver)},e.state.items.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement("div",Object.assign({className:"white bg-success",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:j(t.isDragging,n.draggableProps.style)}),e.content)})}),n.placeholder)}),d.a.createElement(v.c,{droppableId:"droppable2"},function(n,t){return d.a.createElement("div",{ref:n.innerRef,style:C(t.isDraggingOver)},e.state.selected.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement("div",Object.assign({className:"white bg-danger",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:j(t.isDragging,n.draggableProps.style)}),e.content)})}),n.placeholder)})))}}]),n}(l.Component),w=function(e){function n(){return Object(r.a)(this,n),Object(i.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(o.a)(n,e),Object(a.a)(n,[{key:"render",value:function(){return d.a.createElement(l.Fragment,null,d.a.createElement(u.a,null,"Drag And Drop"),d.a.createElement(m.a,null,d.a.createElement("p",null,"Beautiful and accessible drag and drop for lists with React."),d.a.createElement("a",{href:"https://github.com/atlassian/react-beautiful-dnd",target:"_blank",rel:"noopener noreferrer"},d.a.createElement("img",{src:"https://img.shields.io/github/stars/atlassian/react-beautiful-dnd.svg?style=social",alt:"Stars"}),d.a.createElement("img",{src:"https://img.shields.io/npm/dm/react-beautiful-dnd.svg",alt:"Downloads"}))),d.a.createElement(c.kb,null,d.a.createElement(c.A,{sm:"12",md:"6"},d.a.createElement(c.i,null,d.a.createElement(c.j,null,d.a.createElement(c.u,null,"Vertical List"),d.a.createElement(p.a,{TabContent1:d.a.createElement(D,null),TabContent2:d.a.createElement(g.PrismCode,{component:"pre",className:"language-javascript"},'import React, { Component } from "react";\nimport { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";\n\n// fake data generator\nconst getItems = count =>\n   Array.from({ length: count }, (v, k) => k).map(k => ({\n      id: `item-${k}`,\n      content: `item ${k}`\n   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n   const result = Array.from(list);\n   const [removed] = result.splice(startIndex, 1);\n   result.splice(endIndex, 0, removed);\n\n   return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n   // some basic styles to make the items look a bit nicer\n   userSelect: "none",\n   padding: grid * 2,\n   margin: `0 0 ${grid}px 0`,\n\n   // change background colour if dragging\n   background: isDragging ? "lightgreen" : "grey",\n\n   // styles we need to apply on draggables\n   ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n   background: isDraggingOver ? "lightblue" : "lightgrey",\n   padding: grid,\n   width: 250\n});\n\nclass VerticalList extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         items: getItems(6)\n      };\n      this.onDragEnd = this.onDragEnd.bind(this);\n   }\n\n   onDragEnd(result) {\n      // dropped outside the list\n      if (!result.destination) {\n         return;\n      }\n\n      const items = reorder(\n         this.state.items,\n         result.source.index,\n         result.destination.index\n      );\n\n      this.setState({\n         items\n      });\n   }\n\n   // Normally you would want to split things out into separate components.\n   // But in this example everything is just done in one place for simplicity\n   render() {\n      return (\n         <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId="droppable">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                     {this.state.items.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n         </DragDropContext>\n      );\n   }\n}\nexport default VerticalList;\n')})))),d.a.createElement(c.A,{sm:"12",md:"6"},d.a.createElement(c.i,null,d.a.createElement(c.j,null,d.a.createElement(c.u,null,"Horizontal List"),d.a.createElement(p.a,{TabContent1:d.a.createElement(x,null),TabContent2:d.a.createElement(g.PrismCode,{component:"pre",className:"language-javascript"},'import React, { Component } from "react";\nimport { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";\n\n// fake data generator\nconst getItems = count =>\n   Array.from({ length: count }, (v, k) => k).map(k => ({\n      id: `item-${k}`,\n      content: `item ${k}`\n   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n   const result = Array.from(list);\n   const [removed] = result.splice(startIndex, 1);\n   result.splice(endIndex, 0, removed);\n\n   return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n   // some basic styles to make the items look a bit nicer\n   userSelect: "none",\n   padding: grid * 2,\n   margin: `0 ${grid}px 0 0`,\n\n   // change background colour if dragging\n   background: isDragging ? "lightgreen" : "grey",\n\n   // styles we need to apply on draggables\n   ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n   background: isDraggingOver ? "lightblue" : "lightgrey",\n   display: "flex",\n   padding: grid,\n   overflow: "auto"\n});\n\nclass HorizontalList extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         items: getItems(6)\n      };\n      this.onDragEnd = this.onDragEnd.bind(this);\n   }\n\n   onDragEnd(result) {\n      // dropped outside the list\n      if (!result.destination) {\n         return;\n      }\n\n      const items = reorder(\n         this.state.items,\n         result.source.index,\n         result.destination.index\n      );\n\n      this.setState({\n         items\n      });\n   }\n\n   // Normally you would want to split things out into separate components.\n   // But in this example everything is just done in one place for simplicity\n   render() {\n      return (\n         <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId="droppable" direction="horizontal">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                     {...provided.droppableProps}\n                  >\n                     {this.state.items.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n         </DragDropContext>\n      );\n   }\n}\nexport default HorizontalList;\n')}))))),d.a.createElement(c.kb,null,d.a.createElement(c.A,{sm:"12"},d.a.createElement(c.i,null,d.a.createElement(c.j,null,d.a.createElement(c.u,null,"Multiple Drop Targets"),d.a.createElement(p.a,{TabContent1:d.a.createElement(S,null),TabContent2:d.a.createElement(g.PrismCode,{component:"pre",className:"language-javascript"},'import React, { Component } from "react";\nimport { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n   Array.from({ length: count }, (v, k) => k).map(k => ({\n      id: `item-${k + offset}`,\n      content: `item ${k + offset}`\n   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n   const result = Array.from(list);\n   const [removed] = result.splice(startIndex, 1);\n   result.splice(endIndex, 0, removed);\n\n   return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n   const sourceClone = Array.from(source);\n   const destClone = Array.from(destination);\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n   destClone.splice(droppableDestination.index, 0, removed);\n\n   const result = {};\n   result[droppableSource.droppableId] = sourceClone;\n   result[droppableDestination.droppableId] = destClone;\n\n   return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n   // some basic styles to make the items look a bit nicer\n   userSelect: "none",\n   padding: grid * 2,\n   margin: `0 0 ${grid}px 0`,\n\n   // change background colour if dragging\n   background: isDragging ? "lightgreen" : "grey",\n\n   // styles we need to apply on draggables\n   ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n   background: isDraggingOver ? "lightblue" : "lightgrey",\n   padding: grid,\n   width: 250\n});\n\nclass multipleTarget extends Component {\n   state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n   };\n\n   /**\n    * A semi-generic way to handle multiple lists. Matches\n    * the IDs of the droppable container to the names of the\n    * source arrays stored in the state.\n    */\n   id2List = {\n      droppable: "items",\n      droppable2: "selected"\n   };\n\n   getList = id => this.state[this.id2List[id]];\n\n   onDragEnd = result => {\n      const { source, destination } = result;\n\n      // dropped outside the list\n      if (!destination) {\n         return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n         const items = reorder(\n            this.getList(source.droppableId),\n            source.index,\n            destination.index\n         );\n\n         let state = { items };\n\n         if (source.droppableId === "droppable2") {\n            state = { selected: items };\n         }\n\n         this.setState(state);\n      } else {\n         const result = move(\n            this.getList(source.droppableId),\n            this.getList(destination.droppableId),\n            source,\n            destination\n         );\n\n         this.setState({\n            items: result.droppable,\n            selected: result.droppable2\n         });\n      }\n   };\n\n   // Normally you would want to split things out into separate components.\n   // But in this example everything is just done in one place for simplicity\n   render() {\n      return (\n         <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId="droppable">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                     {this.state.items.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n            <Droppable droppableId="droppable2">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                     {this.state.selected.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n         </DragDropContext>\n      );\n   }\n}\nexport default multipleTarget;\n')}))))))}}]),n}(l.Component);n.default=w},96:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=function(e){var n=e.className;return a.a.createElement("div",{className:"content-header".concat(void 0===n?"":" ".concat(n))},e.children)}},97:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=function(e){var n=e.className;return a.a.createElement("div",{className:"content-sub-header".concat(void 0===n?"":" ".concat(n))},e.children)}},99:function(e,n,t){"use strict";t.d(n,"a",function(){return b});var r=t(20),a=t(21),i=t(23),s=t(22),o=t(24),l=t(25),d=t(0),c=t.n(d),g=t(98),p=t(95),u=t(13),m=t.n(u),b=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(i.a)(this,Object(s.a)(n).call(this,e))).toggle=t.toggle.bind(Object(l.a)(Object(l.a)(t))),t.state={activeTab:"1"},t}return Object(o.a)(n,e),Object(a.a)(n,[{key:"toggle",value:function(e){this.state.activeTab!==e&&this.setState({activeTab:e})}},{key:"render",value:function(){var e=this;return c.a.createElement("div",{className:"nav-tabs-vc"},c.a.createElement(p.Z,{tabs:!0},c.a.createElement(p.ab,null,c.a.createElement(p.bb,{className:m()({active:"1"===this.state.activeTab}),onClick:function(){e.toggle("1")}},c.a.createElement(g.Eye,{size:18}))),c.a.createElement(p.ab,null,c.a.createElement(p.bb,{className:m()({active:"2"===this.state.activeTab}),onClick:function(){e.toggle("2")}},c.a.createElement(g.Code,{size:18})))),c.a.createElement(p.lb,{activeTab:this.state.activeTab,className:"px-0"},c.a.createElement(p.mb,{tabId:"1"},c.a.createElement(p.kb,null,c.a.createElement(p.A,{sm:"12"},this.props.TabContent1))),c.a.createElement(p.mb,{tabId:"2"},c.a.createElement(p.kb,null,c.a.createElement(p.A,{sm:"12"},this.props.TabContent2)))))}}]),n}(c.a.Component)}}]);
//# sourceMappingURL=49.923846d8.chunk.js.map