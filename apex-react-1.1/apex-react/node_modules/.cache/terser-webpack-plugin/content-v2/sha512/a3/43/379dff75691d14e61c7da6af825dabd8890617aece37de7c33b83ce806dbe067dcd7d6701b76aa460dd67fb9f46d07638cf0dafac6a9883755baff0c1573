{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\views\\\\components\\\\extra\\\\examples\\\\dndVerticalList.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\views\\\\components\\\\extra\\\\examples\\\\dndHorizontalList.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\views\\\\components\\\\extra\\\\examples\\\\dndMultipleTarget.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\views\\\\components\\\\extra\\\\dragAndDrop.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\views\\\\components\\\\extra\\\\exampleSource\\\\dndVerticalList.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\views\\\\components\\\\extra\\\\exampleSource\\\\dndHorizontalList.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\views\\\\components\\\\extra\\\\exampleSource\\\\dndMultipleTarget.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\components\\\\contentHead\\\\contentHeader.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\components\\\\contentHead\\\\contentSubHeader.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\yourqr_admin\\\\apex-react-1.1\\\\apex-react\\\\src\\\\components\\\\tabs\\\\customTabs.js\"],\"names\":[\"getItems\",\"count\",\"Array\",\"from\",\"length\",\"v\",\"k\",\"map\",\"id\",\"concat\",\"content\",\"VerticalList\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"items\",\"onDragEnd\",\"bind\",\"assertThisInitialized\",\"result\",\"destination\",\"list\",\"startIndex\",\"endIndex\",\"_result$splice\",\"splice\",\"removed\",\"slicedToArray\",\"reorder\",\"source\",\"index\",\"setState\",\"_this2\",\"react_default\",\"a\",\"createElement\",\"react_beautiful_dnd_esm\",\"droppableId\",\"provided\",\"snapshot\",\"ref\",\"innerRef\",\"style\",\"isDraggingOver\",\"background\",\"padding\",\"width\",\"item\",\"key\",\"draggableId\",\"assign\",\"className\",\"draggableProps\",\"dragHandleProps\",\"isDragging\",\"draggableStyle\",\"objectSpread\",\"userSelect\",\"grid\",\"margin\",\"placeholder\",\"Component\",\"HorizontalList\",\"direction\",\"display\",\"overflow\",\"droppableProps\",\"offset\",\"arguments\",\"undefined\",\"move\",\"droppableSource\",\"droppableDestination\",\"sourceClone\",\"destClone\",\"_sourceClone$splice\",\"getItemStyle\",\"getListStyle\",\"multipleTarget\",\"selected\",\"id2List\",\"droppable\",\"droppable2\",\"getList\",\"DragAndDrop\",\"react\",\"contentHeader\",\"contentSubHeader\",\"href\",\"target\",\"rel\",\"src\",\"alt\",\"reactstrap_es\",\"sm\",\"md\",\"customTabs\",\"TabContent1\",\"dndVerticalList\",\"TabContent2\",\"lib\",\"component\",\"dndHorizontalList\",\"dndMultipleTarget\",\"react__WEBPACK_IMPORTED_MODULE_0__\",\"__webpack_require__\",\"react__WEBPACK_IMPORTED_MODULE_0___default\",\"n\",\"ContentHeader\",\"children\",\"ContentSubHeader\",\"Example\",\"C_Users_USER_Desktop_yourqr_admin_apex_react_1_1_apex_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__\",\"C_Users_USER_Desktop_yourqr_admin_apex_react_1_1_apex_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__\",\"C_Users_USER_Desktop_yourqr_admin_apex_react_1_1_apex_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__\",\"toggle\",\"C_Users_USER_Desktop_yourqr_admin_apex_react_1_1_apex_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__\",\"activeTab\",\"tab\",\"react__WEBPACK_IMPORTED_MODULE_6___default\",\"reactstrap__WEBPACK_IMPORTED_MODULE_8__\",\"tabs\",\"classnames\",\"active\",\"onClick\",\"react_feather__WEBPACK_IMPORTED_MODULE_7__\",\"size\",\"tabId\",\"React\"],\"mappings\":\"yPAIMA,EAAW,SAAAC,GAAK,OACnBC,MAAMC,KAAK,CAAEC,OAAQH,GAAS,SAACI,EAAGC,GAAJ,OAAUA,IAAGC,IAAI,SAAAD,GAAC,MAAK,CAClDE,GAAE,QAAAC,OAAUH,GACZI,QAAO,QAAAD,OAAUH,OAoGRK,cAlEZ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACVC,MAAOrB,EAAS,IAEnBa,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,CAAAA,OAAAU,EAAA,EAAAV,CAAAD,KALDA,yEAQTY,GAEP,GAAKA,EAAOC,YAAZ,CAIA,IAAML,EA5CI,SAACM,EAAMC,EAAYC,GAChC,IAAMJ,EAASvB,MAAMC,KAAKwB,GADmBG,EAE3BL,EAAOM,OAAOH,EAAY,GAArCI,EAFsClB,OAAAmB,EAAA,EAAAnB,CAAAgB,EAAA,GAAA,GAK7C,OAFAL,EAAOM,OAAOF,EAAU,EAAGG,GAEpBP,EAuCUS,CACXlB,KAAKI,MAAMC,MACXI,EAAOU,OAAOC,MACdX,EAAOC,YAAYU,OAGtBpB,KAAKqB,SAAS,CACXhB,MAAAA,sCAMG,IAAAiB,EAAAtB,KACN,OACGuB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBpB,UAAWN,KAAKM,WAC9BiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,YAAY,aACnB,SAACC,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA,CACGK,IAAKF,EAASG,SACdC,OAzCAC,EAyCoBJ,EAASI,eAzCV,CACrCC,WAAYD,EAAiB,YAAc,YAC3CE,QAjBU,EAkBVC,MAAO,OAwCYd,EAAKlB,MAAMC,MAAMd,IAAI,SAAC8C,EAAMjB,GAAP,OACnBG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACGY,IAAKD,EAAK7C,GACV+C,YAAaF,EAAK7C,GAClB4B,MAAOA,GAEN,SAACQ,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA3B,OAAA0C,OAAA,CAAKC,UAAU,mBACZX,IAAKF,EAASG,UACVH,EAASc,eACTd,EAASe,gBAHhB,CAIGX,OAnEXY,EAoEcf,EAASe,WApEXC,EAqEEjB,EAASc,eAAeV,MArEvClC,OAAAgD,EAAA,EAAAhD,CAAA,CAElBiD,WAAY,OACZZ,QAASa,GACTC,OAAM,OAAAxD,OANI,EAMJ,QAGNyC,WAAYU,EAAa,aAAe,QAGrCC,MA8D4BR,EAAK3C,SAxElB,IAACkD,EAAYC,MA6EZjB,EAASsB,aAhEV,IAAAjB,YAMMkB,EAAAA,WCpCrBnE,EAAW,SAAAC,GAAK,OACnBC,MAAMC,KAAK,CAAEC,OAAQH,GAAS,SAACI,EAAGC,GAAJ,OAAUA,IAAGC,IAAI,SAAAD,GAAC,MAAK,CAClDE,GAAE,QAAAC,OAAUH,GACZI,QAAO,QAAAD,OAAUH,OAsGR8D,cAnEZ,SAAAA,EAAYxD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,IAChBvD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsD,GAAAjD,KAAAH,KAAMJ,KACDQ,MAAQ,CACVC,MAAOrB,EAAS,IAEnBa,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,CAAAA,OAAAU,EAAA,EAAAV,CAAAD,KALDA,yEAQTY,GAEP,GAAKA,EAAOC,YAAZ,CAIA,IAAML,EA7CI,SAACM,EAAMC,EAAYC,GAChC,IAAMJ,EAASvB,MAAMC,KAAKwB,GADmBG,EAE3BL,EAAOM,OAAOH,EAAY,GAArCI,EAFsClB,OAAAmB,EAAA,EAAAnB,CAAAgB,EAAA,GAAA,GAK7C,OAFAL,EAAOM,OAAOF,EAAU,EAAGG,GAEpBP,EAwCUS,CACXlB,KAAKI,MAAMC,MACXI,EAAOU,OAAOC,MACdX,EAAOC,YAAYU,OAGtBpB,KAAKqB,SAAS,CACXhB,MAAAA,sCAMG,IAAAiB,EAAAtB,KACN,OACGuB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBpB,UAAWN,KAAKM,WAC9BiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,YAAY,YAAY0B,UAAU,cACzC,SAACzB,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA3B,OAAA0C,OAAA,CACGV,IAAKF,EAASG,SACdC,OA1CAC,EA0CoBJ,EAASI,eA1CV,CACrCC,WAAYD,EAAiB,YAAc,YAC3CqB,QAAS,OACTnB,QAlBU,EAmBVoB,SAAU,UAuCY3B,EAAS4B,gBAEZlC,EAAKlB,MAAMC,MAAMd,IAAI,SAAC8C,EAAMjB,GAAP,OACnBG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACGY,IAAKD,EAAK7C,GACV+C,YAAaF,EAAK7C,GAClB4B,MAAOA,GAEN,SAACQ,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA3B,OAAA0C,OAAA,CAAKC,UAAU,mBACZX,IAAKF,EAASG,UACVH,EAASc,eACTd,EAASe,gBAHhB,CAIGX,OArEXY,EAsEcf,EAASe,WAtEXC,EAuEEjB,EAASc,eAAeV,MAvEvClC,OAAAgD,EAAA,EAAAhD,CAAA,CAElBiD,WAAY,OACZZ,QAASa,GACTC,OAAM,KAAAxD,OANI,EAMJ,UAGNyC,WAAYU,EAAa,aAAe,QAGrCC,MAgE4BR,EAAK3C,SA1ElB,IAACkD,EAAYC,MA+EZjB,EAASsB,aAlEV,IAAAjB,YAOQkB,EAAAA,WCrCvBnE,EAAW,SAACC,GAAD,IAAQwE,EAARC,UAAAtE,OAAA,QAAAuE,IAAAD,UAAA,GAAAA,UAAA,GAAiB,EAAjB,OACdxE,MAAMC,KAAK,CAAEC,OAAQH,GAAS,SAACI,EAAGC,GAAJ,OAAUA,IAAGC,IAAI,SAAAD,GAAC,MAAK,CAClDE,GAAE,QAAAC,OAAUH,EAAImE,GAChB/D,QAAO,QAAAD,OAAUH,EAAImE,OAIrBvC,EAAU,SAACP,EAAMC,EAAYC,GAChC,IAAMJ,EAASvB,MAAMC,KAAKwB,GADmBG,EAE3BL,EAAOM,OAAOH,EAAY,GAArCI,EAFsClB,OAAAmB,EAAA,EAAAnB,CAAAgB,EAAA,GAAA,GAK7C,OAFAL,EAAOM,OAAOF,EAAU,EAAGG,GAEpBP,GAMJmD,EAAO,SAACzC,EAAQT,EAAamD,EAAiBC,GACjD,IAAMC,EAAc7E,MAAMC,KAAKgC,GACzB6C,EAAY9E,MAAMC,KAAKuB,GAF6CuD,EAGxDF,EAAYhD,OAAO8C,EAAgBzC,MAAO,GAArDJ,EAHmElB,OAAAmB,EAAA,EAAAnB,CAAAmE,EAAA,GAAA,GAK1ED,EAAUjD,OAAO+C,EAAqB1C,MAAO,EAAGJ,GAEhD,IAAMP,EAAS,GAIf,OAHAA,EAAOoD,EAAgBlC,aAAeoC,EACtCtD,EAAOqD,EAAqBnC,aAAeqC,EAEpCvD,GAKJyD,EAAe,SAACtB,EAAYC,GAAb,OAAA/C,OAAAgD,EAAA,EAAAhD,CAAA,CAElBiD,WAAY,OACZZ,QAASa,GACTC,OAAM,OAAAxD,OANI,EAMJ,QAGNyC,WAAYU,EAAa,aAAe,QAGrCC,IAGAsB,EAAe,SAAAlC,GAAc,MAAK,CACrCC,WAAYD,EAAiB,YAAc,YAC3CE,QAjBU,EAkBVC,MAAO,MAoIKgC,6MAhIZhE,MAAQ,CACLC,MAAOrB,EAAS,IAChBqF,SAAUrF,EAAS,EAAG,OAQzBsF,QAAU,CACPC,UAAW,QACXC,WAAY,cAGfC,QAAU,SAAAjF,GAAE,OAAIK,EAAKO,MAAMP,EAAKyE,QAAQ9E,OAExCc,UAAY,SAAAG,GAAU,IACXU,EAAwBV,EAAxBU,OAAQT,EAAgBD,EAAhBC,YAGhB,GAAKA,EAIL,GAAIS,EAAOQ,cAAgBjB,EAAYiB,YAAa,CACjD,IAAMtB,EAAQa,EACXrB,EAAK4E,QAAQtD,EAAOQ,aACpBR,EAAOC,MACPV,EAAYU,OAGXhB,EAAQ,CAAEC,MAAAA,GAEa,eAAvBc,EAAOQ,cACRvB,EAAQ,CAAEiE,SAAUhE,IAGvBR,EAAKwB,SAASjB,OACV,CACJ,IAAMK,EAASmD,EACZ/D,EAAK4E,QAAQtD,EAAOQ,aACpB9B,EAAK4E,QAAQ/D,EAAYiB,aACzBR,EACAT,GAGHb,EAAKwB,SAAS,CACXhB,MAAOI,EAAO8D,UACdF,SAAU5D,EAAO+D,uFAOjB,IAAAlD,EAAAtB,KACN,OACGuB,EAAAC,EAAAC,cAAA,MAAA,CAAKgB,UAAU,iCACZlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBpB,UAAWN,KAAKM,WACjCiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,YAAY,aACnB,SAACC,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA,CACGK,IAAKF,EAASG,SACdC,MAAOmC,EAAatC,EAASI,iBAE5BX,EAAKlB,MAAMC,MAAMd,IAAI,SAAC8C,EAAMjB,GAAP,OACnBG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACGY,IAAKD,EAAK7C,GACV+C,YAAaF,EAAK7C,GAClB4B,MAAOA,GAEN,SAACQ,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA3B,OAAA0C,OAAA,CAAKC,UAAU,mBACZX,IAAKF,EAASG,UACVH,EAASc,eACTd,EAASe,gBAHhB,CAIGX,MAAOkC,EACJrC,EAASe,WACThB,EAASc,eAAeV,SAG1BK,EAAK3C,aAKjBkC,EAASsB,eAInB3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,YAAY,cACnB,SAACC,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA,CACGK,IAAKF,EAASG,SACdC,MAAOmC,EAAatC,EAASI,iBAE5BX,EAAKlB,MAAMiE,SAAS9E,IAAI,SAAC8C,EAAMjB,GAAP,OACtBG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACGY,IAAKD,EAAK7C,GACV+C,YAAaF,EAAK7C,GAClB4B,MAAOA,GAEN,SAACQ,EAAUC,GAAX,OACEN,EAAAC,EAAAC,cAAA,MAAA3B,OAAA0C,OAAA,CAAKC,UAAU,kBACZX,IAAKF,EAASG,UACVH,EAASc,eACTd,EAASe,gBAHhB,CAIGX,MAAOkC,EACJrC,EAASe,WACThB,EAASc,eAAeV,SAG1BK,EAAK3C,aAKjBkC,EAASsB,wBAvHFC,EAAAA,WClCvBuB,mLAEA,OACGnD,EAAAC,EAAAC,cAACkD,EAAA,SAAD,KACGpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KAAA,iBACArD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KACGtD,EAAAC,EAAAC,cAAA,IAAA,KAAA,gEACAF,EAAAC,EAAAC,cAAA,IAAA,CAAGqD,KAAK,mDAAmDC,OAAO,SAASC,IAAI,uBAC5EzD,EAAAC,EAAAC,cAAA,MAAA,CAAKwD,IAAI,qFAAqFC,IAAI,UAClG3D,EAAAC,EAAAC,cAAA,MAAA,CAAKwD,IAAI,wDAAwDC,IAAI,gBAG3E3D,EAAAC,EAAAC,cAAC0D,EAAA,GAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACb9D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KAAA,iBACA5D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACGC,YAAahE,EAAAC,EAAAC,cAAC+D,EAAD,MACbC,YACGlE,EAAAC,EAAAC,cAACiE,EAAA,UAAD,CACGC,UAAU,MACVlD,UAAU,uBC7CnB,ktGDuDTlB,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACb9D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KAAA,mBACA5D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACGC,YAAahE,EAAAC,EAAAC,cAACmE,EAAD,MACbH,YACGlE,EAAAC,EAAAC,cAACiE,EAAA,UAAD,CACGC,UAAU,MACVlD,UAAU,uBEhEjB,4zGF2EdlB,EAAAC,EAAAC,cAAC0D,EAAA,GAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAKC,GAAG,MACL7D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACG5D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KAAA,yBACA5D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACGC,YAAahE,EAAAC,EAAAC,cAACoE,EAAD,MACbJ,YACGlE,EAAAC,EAAAC,cAACiE,EAAA,UAAD,CACGC,UAAU,MACVlD,UAAU,uBGrFjB,23LHuBAU,EAAAA,WA6EXuB,EAAAA,QAAAA,mCIpGf,IAAAoB,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAeeI,EAAAA,EAbO,SAAAtG,GAAS,IACtB6C,EAAa7C,EAAb6C,UACN,OACGuD,EAAAxE,EAAAC,cAAA,MAAA,CACGgB,UAAS,iBAAAhD,YACQkE,IAAdlB,EAA0B,GAA1B,IAAAhD,OAAmCgD,KAGrC7C,EAAMuG,4CCVhB,IAAAL,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAeeM,EAAAA,EAbU,SAAAxG,GAAS,IACvB6C,EAAc7C,EAAd6C,UACR,OACGuD,EAAAxE,EAAAC,cAAA,MAAA,CACGgB,UAAS,qBAAAhD,YACQkE,IAAdlB,EAA0B,GAA1B,IAAAhD,OAAmCgD,KAGrC7C,EAAMuG,iLCGKE,cAClB,SAAAA,EAAYzG,GAAO,IAAAC,EAAA,OAAAC,OAAAwG,EAAA,EAAAxG,CAAAE,KAAAqG,IAChBxG,EAAAC,OAAAyG,EAAA,EAAAzG,CAAAE,KAAAF,OAAA0G,EAAA,EAAA1G,CAAAuG,GAAAlG,KAAAH,KAAMJ,KAED6G,OAAS5G,EAAK4G,OAAOlG,KAAZT,OAAA4G,EAAA,EAAA5G,CAAAA,OAAA4G,EAAA,EAAA5G,CAAAD,KACdA,EAAKO,MAAQ,CACVuG,UAAW,KALE9G,sEASZ+G,GACA5G,KAAKI,MAAMuG,YAAcC,GAC1B5G,KAAKqB,SAAS,CACXsF,UAAWC,qCAKX,IAAAtF,EAAAtB,KACN,OACG6G,EAAArF,EAAAC,cAAA,MAAA,CAAKgB,UAAU,eACZoE,EAAArF,EAAAC,cAACqF,EAAA,EAAD,CAAKC,MAAI,GACNF,EAAArF,EAAAC,cAACqF,EAAA,GAAD,KACGD,EAAArF,EAAAC,cAACqF,EAAA,GAAD,CACGrE,UAAWuE,GAAAA,CAAW,CACnBC,OAAiC,MAAzBjH,KAAKI,MAAMuG,YAEtBO,QAAS,WACN5F,EAAKmF,OAAO,OAGfI,EAAArF,EAAAC,cAAC0F,EAAA,IAAD,CAAKC,KAAM,OAGjBP,EAAArF,EAAAC,cAACqF,EAAA,GAAD,KACGD,EAAArF,EAAAC,cAACqF,EAAA,GAAD,CACGrE,UAAWuE,GAAAA,CAAW,CACnBC,OAAiC,MAAzBjH,KAAKI,MAAMuG,YAEtBO,QAAS,WACN5F,EAAKmF,OAAO,OAGfI,EAAArF,EAAAC,cAAC0F,EAAA,KAAD,CAAMC,KAAM,QAKrBP,EAAArF,EAAAC,cAACqF,EAAA,GAAD,CAAYH,UAAW3G,KAAKI,MAAMuG,UAAWlE,UAAU,QACpDoE,EAAArF,EAAAC,cAACqF,EAAA,GAAD,CAASO,MAAM,KACZR,EAAArF,EAAAC,cAACqF,EAAA,GAAD,KACGD,EAAArF,EAAAC,cAACqF,EAAA,EAAD,CAAK1B,GAAG,MACJpF,KAAKJ,MAAM2F,eAIrBsB,EAAArF,EAAAC,cAACqF,EAAA,GAAD,CAASO,MAAM,KACZR,EAAArF,EAAAC,cAACqF,EAAA,GAAD,KACGD,EAAArF,EAAAC,cAACqF,EAAA,EAAD,CAAK1B,GAAG,MACJpF,KAAKJ,MAAM6F,wBA3DC6B,EAAAA,EAAMnE\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = count =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k}`,\\n      content: `item ${k}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: `0 0 ${grid}px 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass VerticalList extends Component {\\n   constructor(props) {\\n      super(props);\\n      this.state = {\\n         items: getItems(6)\\n      };\\n      this.onDragEnd = this.onDragEnd.bind(this);\\n   }\\n\\n   onDragEnd(result) {\\n      // dropped outside the list\\n      if (!result.destination) {\\n         return;\\n      }\\n\\n      const items = reorder(\\n         this.state.items,\\n         result.source.index,\\n         result.destination.index\\n      );\\n\\n      this.setState({\\n         items\\n      });\\n   }\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div className=\\\"white bg-success\\\"\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\n\\nexport default VerticalList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = count =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k}`,\\n      content: `item ${k}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: `0 ${grid}px 0 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   display: \\\"flex\\\",\\n   padding: grid,\\n   overflow: \\\"auto\\\"\\n});\\n\\nclass HorizontalList extends Component {\\n   constructor(props) {\\n      super(props);\\n      this.state = {\\n         items: getItems(6)\\n      };\\n      this.onDragEnd = this.onDragEnd.bind(this);\\n   }\\n\\n   onDragEnd(result) {\\n      // dropped outside the list\\n      if (!result.destination) {\\n         return;\\n      }\\n\\n      const items = reorder(\\n         this.state.items,\\n         result.source.index,\\n         result.destination.index\\n      );\\n\\n      this.setState({\\n         items\\n      });\\n   }\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\" direction=\\\"horizontal\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                     {...provided.droppableProps}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div className=\\\"white bg-success\\\"\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\n\\nexport default HorizontalList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = (count, offset = 0) =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k + offset}`,\\n      content: `item ${k + offset}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\n/**\\n * Moves an item from one list to another list.\\n */\\nconst move = (source, destination, droppableSource, droppableDestination) => {\\n   const sourceClone = Array.from(source);\\n   const destClone = Array.from(destination);\\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\\n\\n   destClone.splice(droppableDestination.index, 0, removed);\\n\\n   const result = {};\\n   result[droppableSource.droppableId] = sourceClone;\\n   result[droppableDestination.droppableId] = destClone;\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: `0 0 ${grid}px 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass multipleTarget extends Component {\\n   state = {\\n      items: getItems(10),\\n      selected: getItems(5, 10)\\n   };\\n\\n   /**\\n    * A semi-generic way to handle multiple lists. Matches\\n    * the IDs of the droppable container to the names of the\\n    * source arrays stored in the state.\\n    */\\n   id2List = {\\n      droppable: \\\"items\\\",\\n      droppable2: \\\"selected\\\"\\n   };\\n\\n   getList = id => this.state[this.id2List[id]];\\n\\n   onDragEnd = result => {\\n      const { source, destination } = result;\\n\\n      // dropped outside the list\\n      if (!destination) {\\n         return;\\n      }\\n\\n      if (source.droppableId === destination.droppableId) {\\n         const items = reorder(\\n            this.getList(source.droppableId),\\n            source.index,\\n            destination.index\\n         );\\n\\n         let state = { items };\\n\\n         if (source.droppableId === \\\"droppable2\\\") {\\n            state = { selected: items };\\n         }\\n\\n         this.setState(state);\\n      } else {\\n         const result = move(\\n            this.getList(source.droppableId),\\n            this.getList(destination.droppableId),\\n            source,\\n            destination\\n         );\\n\\n         this.setState({\\n            items: result.droppable,\\n            selected: result.droppable2\\n         });\\n      }\\n   };\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <div className=\\\"d-flex justify-content-around\\\">\\n            <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div className=\\\"white bg-success\\\"\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n            <Droppable droppableId=\\\"droppable2\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.selected.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div className=\\\"white bg-danger\\\"\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n         </div>\\n      );\\n   }\\n}\\n\\nexport default multipleTarget;\\n\",\"import React, { Component, Fragment } from \\\"react\\\";\\nimport { Card, CardBody, CardTitle, Row, Col } from \\\"reactstrap\\\";\\n\\n//Prism\\n// eslint-disable-next-line\\nimport Prism from \\\"prismjs\\\";  //Include JS\\nimport \\\"prismjs/themes/prism-okaidia.css\\\"; //Include CSS\\nimport { PrismCode } from \\\"react-prism\\\"; //Prism Component\\n\\nimport CustomTabs from \\\"../../../components/tabs/customTabs\\\";\\nimport ContentHeader from \\\"../../../components/contentHead/contentHeader\\\";\\nimport ContentSubHeader from \\\"../../../components/contentHead/contentSubHeader\\\";\\n\\n// Import examples\\nimport VerticalList from \\\"./examples/dndVerticalList\\\";\\nimport HorizontalList from \\\"./examples/dndHorizontalList\\\";\\nimport MultipleTarget from \\\"./examples/dndMultipleTarget\\\";\\n\\n// Import Example Source Code\\nimport VerticalListSource from \\\"./exampleSource/dndVerticalList\\\";\\nimport HorizontalListSource from \\\"./exampleSource/dndHorizontalList\\\";\\nimport MultipleTargetSource from \\\"./exampleSource/dndMultipleTarget\\\";\\n\\nclass DragAndDrop extends Component {\\n   render() {\\n      return (\\n         <Fragment>\\n            <ContentHeader>Drag And Drop</ContentHeader>\\n            <ContentSubHeader>\\n               <p>Beautiful and accessible drag and drop for lists with React.</p>\\n               <a href=\\\"https://github.com/atlassian/react-beautiful-dnd\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\\n                  <img src=\\\"https://img.shields.io/github/stars/atlassian/react-beautiful-dnd.svg?style=social\\\" alt=\\\"Stars\\\" />\\n                  <img src=\\\"https://img.shields.io/npm/dm/react-beautiful-dnd.svg\\\" alt=\\\"Downloads\\\"/>\\n               </a>\\n            </ContentSubHeader>\\n            <Row>\\n               <Col sm=\\\"12\\\" md=\\\"6\\\">\\n                  <Card>\\n                     <CardBody>\\n                        <CardTitle>Vertical List</CardTitle>\\n                        <CustomTabs\\n                           TabContent1={<VerticalList />}\\n                           TabContent2={\\n                              <PrismCode\\n                                 component=\\\"pre\\\"\\n                                 className=\\\"language-javascript\\\"\\n                              >\\n                                 {VerticalListSource}\\n                              </PrismCode>\\n                           }\\n                        />\\n                     </CardBody>\\n                  </Card>\\n               </Col>\\n\\n               <Col sm=\\\"12\\\" md=\\\"6\\\">\\n                  <Card>\\n                     <CardBody>\\n                        <CardTitle>Horizontal List</CardTitle>\\n                        <CustomTabs\\n                           TabContent1={<HorizontalList />}\\n                           TabContent2={\\n                              <PrismCode\\n                                 component=\\\"pre\\\"\\n                                 className=\\\"language-javascript\\\"\\n                              >\\n                                 {HorizontalListSource}\\n                              </PrismCode>\\n                           }\\n                        />\\n                     </CardBody>\\n                  </Card>\\n               </Col>\\n            </Row>\\n\\n            <Row>\\n               <Col sm=\\\"12\\\">\\n                  <Card>\\n                     <CardBody>\\n                        <CardTitle>Multiple Drop Targets</CardTitle>\\n                        <CustomTabs\\n                           TabContent1={<MultipleTarget />}\\n                           TabContent2={\\n                              <PrismCode\\n                                 component=\\\"pre\\\"\\n                                 className=\\\"language-javascript\\\"\\n                              >\\n                                 {MultipleTargetSource}\\n                              </PrismCode>\\n                           }\\n                        />\\n                     </CardBody>\\n                  </Card>\\n               </Col>\\n            </Row>\\n         </Fragment>\\n      );\\n   }\\n}\\n\\nexport default DragAndDrop;\\n\",\"const VerticalListSource = `import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = count =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: \\\\`item-\\\\${k}\\\\`,\\n      content: \\\\`item \\\\${k}\\\\`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: \\\\`0 0 \\\\${grid}px 0\\\\`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass VerticalList extends Component {\\n   constructor(props) {\\n      super(props);\\n      this.state = {\\n         items: getItems(6)\\n      };\\n      this.onDragEnd = this.onDragEnd.bind(this);\\n   }\\n\\n   onDragEnd(result) {\\n      // dropped outside the list\\n      if (!result.destination) {\\n         return;\\n      }\\n\\n      const items = reorder(\\n         this.state.items,\\n         result.source.index,\\n         result.destination.index\\n      );\\n\\n      this.setState({\\n         items\\n      });\\n   }\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default VerticalList;\\n`;\\nexport default VerticalListSource;\\n\",\"const HorizontalListSource = `import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = count =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: \\\\`item-\\\\${k}\\\\`,\\n      content: \\\\`item \\\\${k}\\\\`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: \\\\`0 \\\\${grid}px 0 0\\\\`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   display: \\\"flex\\\",\\n   padding: grid,\\n   overflow: \\\"auto\\\"\\n});\\n\\nclass HorizontalList extends Component {\\n   constructor(props) {\\n      super(props);\\n      this.state = {\\n         items: getItems(6)\\n      };\\n      this.onDragEnd = this.onDragEnd.bind(this);\\n   }\\n\\n   onDragEnd(result) {\\n      // dropped outside the list\\n      if (!result.destination) {\\n         return;\\n      }\\n\\n      const items = reorder(\\n         this.state.items,\\n         result.source.index,\\n         result.destination.index\\n      );\\n\\n      this.setState({\\n         items\\n      });\\n   }\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\" direction=\\\"horizontal\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                     {...provided.droppableProps}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default HorizontalList;\\n`;\\n\\nexport default HorizontalListSource;\\n\",\"const MultipleTargetSource = `import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = (count, offset = 0) =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: \\\\`item-\\\\${k + offset}\\\\`,\\n      content: \\\\`item \\\\${k + offset}\\\\`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\n/**\\n * Moves an item from one list to another list.\\n */\\nconst move = (source, destination, droppableSource, droppableDestination) => {\\n   const sourceClone = Array.from(source);\\n   const destClone = Array.from(destination);\\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\\n\\n   destClone.splice(droppableDestination.index, 0, removed);\\n\\n   const result = {};\\n   result[droppableSource.droppableId] = sourceClone;\\n   result[droppableDestination.droppableId] = destClone;\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: \\\\`0 0 \\\\${grid}px 0\\\\`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass multipleTarget extends Component {\\n   state = {\\n      items: getItems(10),\\n      selected: getItems(5, 10)\\n   };\\n\\n   /**\\n    * A semi-generic way to handle multiple lists. Matches\\n    * the IDs of the droppable container to the names of the\\n    * source arrays stored in the state.\\n    */\\n   id2List = {\\n      droppable: \\\"items\\\",\\n      droppable2: \\\"selected\\\"\\n   };\\n\\n   getList = id => this.state[this.id2List[id]];\\n\\n   onDragEnd = result => {\\n      const { source, destination } = result;\\n\\n      // dropped outside the list\\n      if (!destination) {\\n         return;\\n      }\\n\\n      if (source.droppableId === destination.droppableId) {\\n         const items = reorder(\\n            this.getList(source.droppableId),\\n            source.index,\\n            destination.index\\n         );\\n\\n         let state = { items };\\n\\n         if (source.droppableId === \\\"droppable2\\\") {\\n            state = { selected: items };\\n         }\\n\\n         this.setState(state);\\n      } else {\\n         const result = move(\\n            this.getList(source.droppableId),\\n            this.getList(destination.droppableId),\\n            source,\\n            destination\\n         );\\n\\n         this.setState({\\n            items: result.droppable,\\n            selected: result.droppable2\\n         });\\n      }\\n   };\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n            <Droppable droppableId=\\\"droppable2\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.selected.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default multipleTarget;\\n`;\\nexport default MultipleTargetSource;\\n\",\"import React from \\\"react\\\";\\n\\nconst ContentHeader = props => {\\n  const {className} = props;\\n   return (\\n      <div\\n         className={`content-header${\\n            className === undefined ? \\\"\\\" : ` ${className}`\\n         }`}\\n      >\\n         {props.children}\\n      </div>\\n   );\\n};\\n\\nexport default ContentHeader;\\n\",\"import React from \\\"react\\\";\\n\\nconst ContentSubHeader = props => {\\n   const { className } = props;\\n   return (\\n      <div\\n         className={`content-sub-header${\\n            className === undefined ? \\\"\\\" : ` ${className}`\\n         }`}\\n      >\\n         {props.children}\\n      </div>\\n   );\\n};\\n\\nexport default ContentSubHeader;\\n\",\"import React from \\\"react\\\";\\nimport { Eye, Code } from 'react-feather';\\nimport {\\n   TabContent,\\n   TabPane,\\n   Nav,\\n   NavItem,\\n   NavLink,   \\n   Row,\\n   Col\\n} from \\\"reactstrap\\\";\\nimport classnames from \\\"classnames\\\";\\n\\nexport default class Example extends React.Component {\\n   constructor(props) {\\n      super(props);\\n\\n      this.toggle = this.toggle.bind(this);\\n      this.state = {\\n         activeTab: \\\"1\\\"\\n      };\\n   }\\n\\n   toggle(tab) {\\n      if (this.state.activeTab !== tab) {\\n         this.setState({\\n            activeTab: tab\\n         });\\n      }\\n   }\\n\\n   render() {\\n      return (\\n         <div className=\\\"nav-tabs-vc\\\">\\n            <Nav tabs>\\n               <NavItem>\\n                  <NavLink\\n                     className={classnames({\\n                        active: this.state.activeTab === \\\"1\\\"\\n                     })}\\n                     onClick={() => {\\n                        this.toggle(\\\"1\\\");\\n                     }}\\n                  >\\n                     <Eye size={18} />\\n                  </NavLink>\\n               </NavItem>\\n               <NavItem>\\n                  <NavLink\\n                     className={classnames({\\n                        active: this.state.activeTab === \\\"2\\\"\\n                     })}\\n                     onClick={() => {\\n                        this.toggle(\\\"2\\\");\\n                     }}\\n                  >\\n                     <Code size={18} />\\n                  </NavLink>\\n               </NavItem>\\n            </Nav>\\n            \\n            <TabContent activeTab={this.state.activeTab} className=\\\"px-0\\\">\\n               <TabPane tabId=\\\"1\\\">\\n                  <Row>\\n                     <Col sm=\\\"12\\\">\\n                        {this.props.TabContent1}\\n                     </Col>\\n                  </Row>\\n               </TabPane>\\n               <TabPane tabId=\\\"2\\\">\\n                  <Row>\\n                     <Col sm=\\\"12\\\">\\n                        {this.props.TabContent2}\\n                     </Col>\\n                  </Row>\\n               </TabPane>\\n            </TabContent>\\n         </div>\\n      );\\n   }\\n}\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{1538:function(e,n,t){\"use strict\";t.r(n);var r=t(19),a=t(20),i=t(23),s=t(21),o=t(22),l=t(0),d=t.n(l),c=t(92),g=(t(100),t(101),t(102)),p=t(96),u=t(93),m=t(94),b=t(24),h=t(5),f=t(423),v=t(422),y=function(e){return Array.from({length:e},function(e,n){return n}).map(function(e){return{id:\"item-\".concat(e),content:\"item \".concat(e)}})},D=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(i.a)(this,Object(s.a)(n).call(this,e))).state={items:y(6)},t.onDragEnd=t.onDragEnd.bind(Object(b.a)(Object(b.a)(t))),t}return Object(o.a)(n,e),Object(a.a)(n,[{key:\"onDragEnd\",value:function(e){if(e.destination){var n=function(e,n,t){var r=Array.from(e),a=r.splice(n,1),i=Object(f.a)(a,1)[0];return r.splice(t,0,i),r}(this.state.items,e.source.index,e.destination.index);this.setState({items:n})}}},{key:\"render\",value:function(){var e=this;return d.a.createElement(v.a,{onDragEnd:this.onDragEnd},d.a.createElement(v.c,{droppableId:\"droppable\"},function(n,t){return d.a.createElement(\"div\",{ref:n.innerRef,style:(r=t.isDraggingOver,{background:r?\"lightblue\":\"lightgrey\",padding:8,width:250})},e.state.items.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement(\"div\",Object.assign({className:\"white bg-success\",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:(r=t.isDragging,a=n.draggableProps.style,Object(h.a)({userSelect:\"none\",padding:16,margin:\"0 0 \".concat(8,\"px 0\"),background:r?\"lightgreen\":\"grey\"},a))}),e.content);var r,a})}),n.placeholder);var r}))}}]),n}(l.Component),E=function(e){return Array.from({length:e},function(e,n){return n}).map(function(e){return{id:\"item-\".concat(e),content:\"item \".concat(e)}})},x=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(i.a)(this,Object(s.a)(n).call(this,e))).state={items:E(6)},t.onDragEnd=t.onDragEnd.bind(Object(b.a)(Object(b.a)(t))),t}return Object(o.a)(n,e),Object(a.a)(n,[{key:\"onDragEnd\",value:function(e){if(e.destination){var n=function(e,n,t){var r=Array.from(e),a=r.splice(n,1),i=Object(f.a)(a,1)[0];return r.splice(t,0,i),r}(this.state.items,e.source.index,e.destination.index);this.setState({items:n})}}},{key:\"render\",value:function(){var e=this;return d.a.createElement(v.a,{onDragEnd:this.onDragEnd},d.a.createElement(v.c,{droppableId:\"droppable\",direction:\"horizontal\"},function(n,t){return d.a.createElement(\"div\",Object.assign({ref:n.innerRef,style:(r=t.isDraggingOver,{background:r?\"lightblue\":\"lightgrey\",display:\"flex\",padding:8,overflow:\"auto\"})},n.droppableProps),e.state.items.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement(\"div\",Object.assign({className:\"white bg-success\",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:(r=t.isDragging,a=n.draggableProps.style,Object(h.a)({userSelect:\"none\",padding:16,margin:\"0 \".concat(8,\"px 0 0\"),background:r?\"lightgreen\":\"grey\"},a))}),e.content);var r,a})}),n.placeholder);var r}))}}]),n}(l.Component),k=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Array.from({length:e},function(e,n){return n}).map(function(e){return{id:\"item-\".concat(e+n),content:\"item \".concat(e+n)}})},I=function(e,n,t){var r=Array.from(e),a=r.splice(n,1),i=Object(f.a)(a,1)[0];return r.splice(t,0,i),r},O=function(e,n,t,r){var a=Array.from(e),i=Array.from(n),s=a.splice(t.index,1),o=Object(f.a)(s,1)[0];i.splice(r.index,0,o);var l={};return l[t.droppableId]=a,l[r.droppableId]=i,l},j=function(e,n){return Object(h.a)({userSelect:\"none\",padding:16,margin:\"0 0 \".concat(8,\"px 0\"),background:e?\"lightgreen\":\"grey\"},n)},C=function(e){return{background:e?\"lightblue\":\"lightgrey\",padding:8,width:250}},S=function(e){function n(){var e,t;Object(r.a)(this,n);for(var a=arguments.length,o=new Array(a),l=0;l<a;l++)o[l]=arguments[l];return(t=Object(i.a)(this,(e=Object(s.a)(n)).call.apply(e,[this].concat(o)))).state={items:k(10),selected:k(5,10)},t.id2List={droppable:\"items\",droppable2:\"selected\"},t.getList=function(e){return t.state[t.id2List[e]]},t.onDragEnd=function(e){var n=e.source,r=e.destination;if(r)if(n.droppableId===r.droppableId){var a=I(t.getList(n.droppableId),n.index,r.index),i={items:a};\"droppable2\"===n.droppableId&&(i={selected:a}),t.setState(i)}else{var s=O(t.getList(n.droppableId),t.getList(r.droppableId),n,r);t.setState({items:s.droppable,selected:s.droppable2})}},t}return Object(o.a)(n,e),Object(a.a)(n,[{key:\"render\",value:function(){var e=this;return d.a.createElement(\"div\",{className:\"d-flex justify-content-around\"},d.a.createElement(v.a,{onDragEnd:this.onDragEnd},d.a.createElement(v.c,{droppableId:\"droppable\"},function(n,t){return d.a.createElement(\"div\",{ref:n.innerRef,style:C(t.isDraggingOver)},e.state.items.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement(\"div\",Object.assign({className:\"white bg-success\",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:j(t.isDragging,n.draggableProps.style)}),e.content)})}),n.placeholder)}),d.a.createElement(v.c,{droppableId:\"droppable2\"},function(n,t){return d.a.createElement(\"div\",{ref:n.innerRef,style:C(t.isDraggingOver)},e.state.selected.map(function(e,n){return d.a.createElement(v.b,{key:e.id,draggableId:e.id,index:n},function(n,t){return d.a.createElement(\"div\",Object.assign({className:\"white bg-danger\",ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:j(t.isDragging,n.draggableProps.style)}),e.content)})}),n.placeholder)})))}}]),n}(l.Component),w=function(e){function n(){return Object(r.a)(this,n),Object(i.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(o.a)(n,e),Object(a.a)(n,[{key:\"render\",value:function(){return d.a.createElement(l.Fragment,null,d.a.createElement(u.a,null,\"Drag And Drop\"),d.a.createElement(m.a,null,d.a.createElement(\"p\",null,\"Beautiful and accessible drag and drop for lists with React.\"),d.a.createElement(\"a\",{href:\"https://github.com/atlassian/react-beautiful-dnd\",target:\"_blank\",rel:\"noopener noreferrer\"},d.a.createElement(\"img\",{src:\"https://img.shields.io/github/stars/atlassian/react-beautiful-dnd.svg?style=social\",alt:\"Stars\"}),d.a.createElement(\"img\",{src:\"https://img.shields.io/npm/dm/react-beautiful-dnd.svg\",alt:\"Downloads\"}))),d.a.createElement(c.kb,null,d.a.createElement(c.A,{sm:\"12\",md:\"6\"},d.a.createElement(c.i,null,d.a.createElement(c.j,null,d.a.createElement(c.u,null,\"Vertical List\"),d.a.createElement(p.a,{TabContent1:d.a.createElement(D,null),TabContent2:d.a.createElement(g.PrismCode,{component:\"pre\",className:\"language-javascript\"},'import React, { Component } from \"react\";\\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\\n\\n// fake data generator\\nconst getItems = count =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k}`,\\n      content: `item ${k}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \"none\",\\n   padding: grid * 2,\\n   margin: `0 0 ${grid}px 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \"lightgreen\" : \"grey\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass VerticalList extends Component {\\n   constructor(props) {\\n      super(props);\\n      this.state = {\\n         items: getItems(6)\\n      };\\n      this.onDragEnd = this.onDragEnd.bind(this);\\n   }\\n\\n   onDragEnd(result) {\\n      // dropped outside the list\\n      if (!result.destination) {\\n         return;\\n      }\\n\\n      const items = reorder(\\n         this.state.items,\\n         result.source.index,\\n         result.destination.index\\n      );\\n\\n      this.setState({\\n         items\\n      });\\n   }\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\"droppable\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default VerticalList;\\n')})))),d.a.createElement(c.A,{sm:\"12\",md:\"6\"},d.a.createElement(c.i,null,d.a.createElement(c.j,null,d.a.createElement(c.u,null,\"Horizontal List\"),d.a.createElement(p.a,{TabContent1:d.a.createElement(x,null),TabContent2:d.a.createElement(g.PrismCode,{component:\"pre\",className:\"language-javascript\"},'import React, { Component } from \"react\";\\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\\n\\n// fake data generator\\nconst getItems = count =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k}`,\\n      content: `item ${k}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \"none\",\\n   padding: grid * 2,\\n   margin: `0 ${grid}px 0 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \"lightgreen\" : \"grey\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\\n   display: \"flex\",\\n   padding: grid,\\n   overflow: \"auto\"\\n});\\n\\nclass HorizontalList extends Component {\\n   constructor(props) {\\n      super(props);\\n      this.state = {\\n         items: getItems(6)\\n      };\\n      this.onDragEnd = this.onDragEnd.bind(this);\\n   }\\n\\n   onDragEnd(result) {\\n      // dropped outside the list\\n      if (!result.destination) {\\n         return;\\n      }\\n\\n      const items = reorder(\\n         this.state.items,\\n         result.source.index,\\n         result.destination.index\\n      );\\n\\n      this.setState({\\n         items\\n      });\\n   }\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                     {...provided.droppableProps}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default HorizontalList;\\n')}))))),d.a.createElement(c.kb,null,d.a.createElement(c.A,{sm:\"12\"},d.a.createElement(c.i,null,d.a.createElement(c.j,null,d.a.createElement(c.u,null,\"Multiple Drop Targets\"),d.a.createElement(p.a,{TabContent1:d.a.createElement(S,null),TabContent2:d.a.createElement(g.PrismCode,{component:\"pre\",className:\"language-javascript\"},'import React, { Component } from \"react\";\\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\\n\\n// fake data generator\\nconst getItems = (count, offset = 0) =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k + offset}`,\\n      content: `item ${k + offset}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\n/**\\n * Moves an item from one list to another list.\\n */\\nconst move = (source, destination, droppableSource, droppableDestination) => {\\n   const sourceClone = Array.from(source);\\n   const destClone = Array.from(destination);\\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\\n\\n   destClone.splice(droppableDestination.index, 0, removed);\\n\\n   const result = {};\\n   result[droppableSource.droppableId] = sourceClone;\\n   result[droppableDestination.droppableId] = destClone;\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \"none\",\\n   padding: grid * 2,\\n   margin: `0 0 ${grid}px 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \"lightgreen\" : \"grey\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass multipleTarget extends Component {\\n   state = {\\n      items: getItems(10),\\n      selected: getItems(5, 10)\\n   };\\n\\n   /**\\n    * A semi-generic way to handle multiple lists. Matches\\n    * the IDs of the droppable container to the names of the\\n    * source arrays stored in the state.\\n    */\\n   id2List = {\\n      droppable: \"items\",\\n      droppable2: \"selected\"\\n   };\\n\\n   getList = id => this.state[this.id2List[id]];\\n\\n   onDragEnd = result => {\\n      const { source, destination } = result;\\n\\n      // dropped outside the list\\n      if (!destination) {\\n         return;\\n      }\\n\\n      if (source.droppableId === destination.droppableId) {\\n         const items = reorder(\\n            this.getList(source.droppableId),\\n            source.index,\\n            destination.index\\n         );\\n\\n         let state = { items };\\n\\n         if (source.droppableId === \"droppable2\") {\\n            state = { selected: items };\\n         }\\n\\n         this.setState(state);\\n      } else {\\n         const result = move(\\n            this.getList(source.droppableId),\\n            this.getList(destination.droppableId),\\n            source,\\n            destination\\n         );\\n\\n         this.setState({\\n            items: result.droppable,\\n            selected: result.droppable2\\n         });\\n      }\\n   };\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\"droppable\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n            <Droppable droppableId=\"droppable2\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.selected.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default multipleTarget;\\n')}))))))}}]),n}(l.Component);n.default=w},93:function(e,n,t){\"use strict\";var r=t(0),a=t.n(r);n.a=function(e){var n=e.className;return a.a.createElement(\"div\",{className:\"content-header\".concat(void 0===n?\"\":\" \".concat(n))},e.children)}},94:function(e,n,t){\"use strict\";var r=t(0),a=t.n(r);n.a=function(e){var n=e.className;return a.a.createElement(\"div\",{className:\"content-sub-header\".concat(void 0===n?\"\":\" \".concat(n))},e.children)}},96:function(e,n,t){\"use strict\";t.d(n,\"a\",function(){return b});var r=t(19),a=t(20),i=t(23),s=t(21),o=t(22),l=t(24),d=t(0),c=t.n(d),g=t(95),p=t(92),u=t(12),m=t.n(u),b=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(i.a)(this,Object(s.a)(n).call(this,e))).toggle=t.toggle.bind(Object(l.a)(Object(l.a)(t))),t.state={activeTab:\"1\"},t}return Object(o.a)(n,e),Object(a.a)(n,[{key:\"toggle\",value:function(e){this.state.activeTab!==e&&this.setState({activeTab:e})}},{key:\"render\",value:function(){var e=this;return c.a.createElement(\"div\",{className:\"nav-tabs-vc\"},c.a.createElement(p.Z,{tabs:!0},c.a.createElement(p.ab,null,c.a.createElement(p.bb,{className:m()({active:\"1\"===this.state.activeTab}),onClick:function(){e.toggle(\"1\")}},c.a.createElement(g.Eye,{size:18}))),c.a.createElement(p.ab,null,c.a.createElement(p.bb,{className:m()({active:\"2\"===this.state.activeTab}),onClick:function(){e.toggle(\"2\")}},c.a.createElement(g.Code,{size:18})))),c.a.createElement(p.lb,{activeTab:this.state.activeTab,className:\"px-0\"},c.a.createElement(p.mb,{tabId:\"1\"},c.a.createElement(p.kb,null,c.a.createElement(p.A,{sm:\"12\"},this.props.TabContent1))),c.a.createElement(p.mb,{tabId:\"2\"},c.a.createElement(p.kb,null,c.a.createElement(p.A,{sm:\"12\"},this.props.TabContent2)))))}}]),n}(c.a.Component)}}]);","extractedComments":[]}